/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as MonitoringImport } from './routes/monitoring'
import { Route as LogsImport } from './routes/logs'
import { Route as LoginImport } from './routes/login'
import { Route as ContainersImport } from './routes/containers'
import { Route as IndexImport } from './routes/index'
import { Route as ContainerContainerIdImport } from './routes/container.$containerId'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const MonitoringRoute = MonitoringImport.update({
  id: '/monitoring',
  path: '/monitoring',
  getParentRoute: () => rootRoute,
} as any)

const LogsRoute = LogsImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ContainersRoute = ContainersImport.update({
  id: '/containers',
  path: '/containers',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ContainerContainerIdRoute = ContainerContainerIdImport.update({
  id: '/container/$containerId',
  path: '/container/$containerId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/containers': {
      id: '/containers'
      path: '/containers'
      fullPath: '/containers'
      preLoaderRoute: typeof ContainersImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/logs': {
      id: '/logs'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof LogsImport
      parentRoute: typeof rootRoute
    }
    '/monitoring': {
      id: '/monitoring'
      path: '/monitoring'
      fullPath: '/monitoring'
      preLoaderRoute: typeof MonitoringImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/container/$containerId': {
      id: '/container/$containerId'
      path: '/container/$containerId'
      fullPath: '/container/$containerId'
      preLoaderRoute: typeof ContainerContainerIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/containers': typeof ContainersRoute
  '/login': typeof LoginRoute
  '/logs': typeof LogsRoute
  '/monitoring': typeof MonitoringRoute
  '/settings': typeof SettingsRoute
  '/container/$containerId': typeof ContainerContainerIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/containers': typeof ContainersRoute
  '/login': typeof LoginRoute
  '/logs': typeof LogsRoute
  '/monitoring': typeof MonitoringRoute
  '/settings': typeof SettingsRoute
  '/container/$containerId': typeof ContainerContainerIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/containers': typeof ContainersRoute
  '/login': typeof LoginRoute
  '/logs': typeof LogsRoute
  '/monitoring': typeof MonitoringRoute
  '/settings': typeof SettingsRoute
  '/container/$containerId': typeof ContainerContainerIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/containers'
    | '/login'
    | '/logs'
    | '/monitoring'
    | '/settings'
    | '/container/$containerId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/containers'
    | '/login'
    | '/logs'
    | '/monitoring'
    | '/settings'
    | '/container/$containerId'
  id:
    | '__root__'
    | '/'
    | '/containers'
    | '/login'
    | '/logs'
    | '/monitoring'
    | '/settings'
    | '/container/$containerId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ContainersRoute: typeof ContainersRoute
  LoginRoute: typeof LoginRoute
  LogsRoute: typeof LogsRoute
  MonitoringRoute: typeof MonitoringRoute
  SettingsRoute: typeof SettingsRoute
  ContainerContainerIdRoute: typeof ContainerContainerIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContainersRoute: ContainersRoute,
  LoginRoute: LoginRoute,
  LogsRoute: LogsRoute,
  MonitoringRoute: MonitoringRoute,
  SettingsRoute: SettingsRoute,
  ContainerContainerIdRoute: ContainerContainerIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/containers",
        "/login",
        "/logs",
        "/monitoring",
        "/settings",
        "/container/$containerId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/containers": {
      "filePath": "containers.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/logs": {
      "filePath": "logs.tsx"
    },
    "/monitoring": {
      "filePath": "monitoring.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/container/$containerId": {
      "filePath": "container.$containerId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
